------------- Navbar --------------------
Criado o componente NAV
ido no Bootstrap e pegado o código de NAV
colado o conteudo no nav.component.html
adicionado a rota no app.component.html do nav.component.html

adicionado no app.module 
import { CollapseModule } from 'ngx-bootstrap/collapse';
imports  CollapseModule.forRoot(),

colado os componentes no bottão e na div abaixo
no botão foi : (click)="isCollapsed = !isCollapsed"
na div foi: [collapse]="isCollapsed" [isAnimated]="true"
agora no Ts foi adicionado o isCollapsed = true;
------------- Grid dos Eventos --------------------
removido <app-palestrantes></app-palestrantes> do app.component.html
refeito a nova grid no eventos.component.html utilizando a ferramenta
form.form-inline>div.form-group.mb-2
table.table.table-striped>thead.thead-dark>tr>th*8
tbody>tr>th*8
assim ele gera automaticamente a estrutura
------------- Desafio Binding e Interpolação --------------------
colocado o ngFor dentro do TR, semelhante a primeira vez que foi feito porem cada td recebendo um item
------------- Binding e Interpolação --------------------
Diretivas Estruturais:
*ngIf
*ngFor
*ngShow
Binding e Interpolações
{{eventos[0].imagemURL}}
------------- ngIf --------------------
Adicionado *ngIf="eventos && eventos.length" no tbody no eventos.component.html
e em baixo foi adicionado um tfoot para caso não possua nada informado
a pessoa receber ao menos uma mensagem
no tfoot foi adicionado o ngIf="!eventos.length"
eventos.component.ts : transformado o public eventos: any = []; em um array, assim ele informa que foi Criado, mas que está vazio
------------- Propriedade Binding --------------------
colocado a tag do img para representar as imagens
colocado as imagens na pasta img, que foi criado dentro da pasta assets
<td><img src="/assets/img/{{item.imagemURL}}" [style.width.px]="widthImg" [style.height.px]="heightImg" [style.margin.px]="marginImg"></td>
foi criado o width,height e margin no typescript

Foi criado no eventos.component.ts
showImg = true;
  changeImg(){
    this.showImg = !this.showImg; //vai receber o oposto dele (false/true)
}
Na img foi colocado o collapse
foi colocado um botão para mostrar as imagens, no qual recebeu o onClick com o método changeImg()
e no titulo foi colocado um Operador Ternario para Exibir/Ocultar
------------- Two-way Data Binding --------------------
Adicionado no Form de pesquisa  [(ngModel)]="filterList"
criado no eventos.component.ts o filterList='', onde já se encontra vazio
importado no module.ts o FormsModule
alterado o <form> para um <div> para funcionar por enquanto,
aparentemente mais tarde irá ser ajustado para form novamente

------------- Filtrando Grid --------------------
transformado o filterList em uma propriedade privada

criado método get e set para o filterList
  public get filterList(){  
    return this._filterList }

  public set filterList(value:string){
    this._filterList = value;
    this._filterList = this.filterList ? this.filtrarEventos(this.filterList) : this.eventos}

criado o método filtrarEventos

  filtrarEventos(filtrarPor: string):any  {
    filtrarPor = filtrarPor.toLocaleLowerCase(); //passa tudo para minusculo
    return this.eventos.filter(
      (evento: any) => evento.tema.toLocaleLowerCase().indexOf(filtrarPor) !== -1 || //ocorreu um erro na video, onde precisou ser colocado (evento: { tema: string; })
      evento.local.toLocaleLowerCase().indexOf(filtrarPor) !== -1   //para pesquisar por local
    )
  }

foi criado um 
public eventosFiltrados: any = [];      //variavel 
Modificado no filterList() 
this.eventosFiltrados = this.filterList ? this.filtrarEventos(this.filterList) : this.eventos} 
modificado no ngFor para eventosFiltrados
<tr *ngFor="let item of eventosFiltrados">

ido em getEventos //que é onde faz o vinculo com o banco de dados
adicionado chaves, antes não possuia chaves, porque é apenas 1 coisa retornando, agora são 2
response => {
    this.eventos = response
    this.eventosFiltrados = this.eventos;
},
------------- Ajuste Layout --------------------
